{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["TodoItem","state","editTitle","placeholder","isEdit","handleEdit","event","name","target","task","props","todo","setState","taskChange","value","submitChanges","taskEdited","key","this","id","completed","changeStatus","removeTask","className","cx","editing","type","checked","onChange","htmlFor","style","textDecoration","onClick","onKeyDown","onBlur","Component","TodoList","items","activeItems","removeCompleted","showAll","showCompleted","showActive","checkedAll","isCheckedAll","activeTab","length","map","href","selected","App","todos","filtered","isAnyFiltered","componentDidMount","JSON","parse","localStorage","getItem","componentDidUpdate","storage","stringify","setItem","handleChange","replace","addTodo","preventDefault","prevState","uuidv4","newListFiltered","newList","item","newItem","every","filter","innerText","validatedForm","edtiTitle","onSubmit","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32610140.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  state = {\n    editTitle: '',\n    placeholder: '',\n    isEdit: '',\n  };\n\n  handleEdit = (event) => {\n    const { name } = event.target;\n    const { task } = this.props.todo;\n\n    this.setState({\n      isEdit: name,\n      editTitle: task,\n    });\n  }\n\n  taskChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      editTitle: value,\n    });\n  }\n\n  submitChanges = (event) => {\n    const { name } = event.target;\n    const { editTitle } = this.state;\n    const { taskEdited } = this.props;\n\n    if (!editTitle) {\n      this.setState({\n        placeholder: 'Enter the task',\n      });\n\n      return;\n    }\n\n    if (event.key === 'Enter' || event.key === 'NumPadEnter') {\n      taskEdited(editTitle, name);\n      this.setState({\n        isEdit: '',\n      });\n\n      return;\n    }\n\n    if (!event.key) {\n      taskEdited(editTitle, name);\n      this.setState({\n        isEdit: '',\n      });\n    }\n  }\n\n  render() {\n    const { task, id, completed } = this.props.todo;\n    const { changeStatus, removeTask } = this.props;\n    const { editTitle, placeholder, isEdit } = this.state;\n\n    return (\n      <li className={cx({ editing: id === isEdit })}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={event => changeStatus(event)}\n          />\n          <label\n            htmlFor={id}\n            style={{ textDecoration: completed ? 'line-through' : 'none' }}\n          >\n            {task}\n          </label>\n          <button\n            type=\"button\"\n            className=\"edit-icon\"\n            name={id}\n            onClick={this.handleEdit}\n          />\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            name={id}\n            onClick={event => removeTask(event)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          placeholder={placeholder}\n          value={editTitle}\n          name={id}\n          onChange={this.taskChange}\n          onKeyDown={this.submitChanges}\n          onBlur={this.submitChanges}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  taskEdited: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    items,\n    activeItems,\n    removeTask,\n    changeStatus,\n    removeCompleted,\n    showAll,\n    showCompleted,\n    showActive,\n    checkedAll,\n    isCheckedAll,\n    activeTab,\n    taskEdited,\n  } = props;\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          checked={items.length ? isCheckedAll : false}\n          className=\"toggle-all\"\n          onChange={checkedAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n          {items.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              changeStatus={changeStatus}\n              removeTask={removeTask}\n              taskEdited={taskEdited}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${activeItems} tasks left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={cx({ selected: activeTab === 'All' })}\n              onClick={showAll}\n            >\n            All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={cx({ selected: activeTab === 'Active' })}\n              onClick={showActive}\n            >\n            Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={cx({ selected: activeTab === 'Completed' })}\n              onClick={showCompleted}\n            >\n            Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={removeCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  activeItems: PropTypes.number.isRequired,\n  isCheckedAll: PropTypes.bool.isRequired,\n  activeTab: PropTypes.string.isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  removeCompleted: PropTypes.func.isRequired,\n  showAll: PropTypes.func.isRequired,\n  showCompleted: PropTypes.func.isRequired,\n  showActive: PropTypes.func.isRequired,\n  checkedAll: PropTypes.func.isRequired,\n  taskEdited: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList/TodoList';\n\nclass App extends React.Component {\n  state = {\n    task: '',\n    todos: [],\n    filtered: [],\n    isAnyFiltered: false,\n    isCheckedAll: false,\n    activeTab: 'All',\n  };\n\n  componentDidMount = () => {\n    this.setState({\n      todos: JSON.parse(localStorage.getItem('state')),\n    });\n  }\n\n  componentDidUpdate = () => {\n    const { todos } = this.state;\n    const storage = JSON.stringify(todos);\n\n    localStorage.setItem('state', storage);\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      task: value.replace(/^\\s+$/g, ''),\n    });\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n    const { task } = this.state;\n\n    this.setState(prevState => ({\n      todos: [...prevState.todos, {\n        id: uuidv4(),\n        task,\n        completed: false,\n      }],\n      task: '',\n      isAnyFiltered: false,\n      filtered: [],\n      activeTab: 'All',\n    }));\n  }\n\n  changeStatus = (event) => {\n    const { checked, id } = event.target;\n    const { todos, filtered } = this.state;\n    let newListFiltered;\n\n    const newList = todos.map((item) => {\n      const newItem = { ...item };\n\n      if (newItem.id === id) {\n        newItem.completed = checked;\n      }\n\n      return newItem;\n    });\n\n    if (filtered) {\n      newListFiltered = filtered.map((item) => {\n        const newItem = { ...item };\n\n        if (newItem.id === id) {\n          newItem.completed = checked;\n        }\n\n        return newItem;\n      });\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n      isCheckedAll: newList.every(item => item.completed === true),\n    });\n  }\n\n  removeTask = (event) => {\n    const { name } = event.target;\n    const { todos, filtered } = this.state;\n    const newList = todos.filter(item => item.id !== name);\n    let newListFiltered;\n\n    if (filtered) {\n      newListFiltered = filtered.filter(item => item.id !== name);\n    } else {\n      newListFiltered = filtered;\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n    });\n  }\n\n  removeCompleted = () => {\n    const { todos, filtered } = this.state;\n    const newList = todos.filter(item => item.completed === false);\n    let newListFiltered;\n\n    if (filtered) {\n      newListFiltered = filtered.filter(item => item.completed === false);\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n      isCheckedAll: false,\n    });\n  }\n\n  showAll = (event) => {\n    event.preventDefault();\n    const { innerText } = event.target;\n\n    this.setState({\n      filtered: [],\n      isAnyFiltered: false,\n      activeTab: innerText,\n    });\n  }\n\n  showCompleted = (event) => {\n    event.preventDefault();\n    const { innerText } = event.target;\n    const { todos } = this.state;\n    const newList = todos.filter(item => item.completed === true);\n\n    this.setState({\n      filtered: [...newList],\n      isAnyFiltered: true,\n      activeTab: innerText,\n    });\n  }\n\n  showActive = (event) => {\n    event.preventDefault();\n    const { innerText } = event.target;\n    const { todos } = this.state;\n    const newList = todos.filter(item => item.completed === false);\n\n    this.setState({\n      filtered: [...newList],\n      isAnyFiltered: true,\n      activeTab: innerText,\n    });\n  }\n\n  validatedForm = (event) => {\n    event.preventDefault();\n  }\n\n  checkedAll = () => {\n    const { todos, isCheckedAll } = this.state;\n\n    const newList = todos.map((item) => {\n      const newItem = { ...item };\n\n      if (!isCheckedAll) {\n        newItem.completed = true;\n      } else {\n        newItem.completed = false;\n      }\n\n      return newItem;\n    });\n\n    this.setState(prevState => ({\n      todos: [...newList],\n      filtered: [],\n      isAnyFiltered: false,\n      isCheckedAll: !prevState.isCheckedAll,\n    }));\n  }\n\n  taskEdited = (edtiTitle, name) => {\n    const { todos, filtered } = this.state;\n    let newListFiltered;\n\n    const newList = todos.map((item) => {\n      const newItem = { ...item };\n\n      if (newItem.id === name) {\n        newItem.task = edtiTitle;\n      }\n\n      return newItem;\n    });\n\n    if (filtered) {\n      newListFiltered = filtered.map((item) => {\n        const newItem = { ...item };\n\n        if (newItem.id === name) {\n          newItem.task = edtiTitle;\n        }\n\n        return newItem;\n      });\n    } else {\n      newListFiltered = filtered;\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n    });\n  }\n\n  render() {\n    const {\n      task,\n      todos,\n      filtered,\n      isAnyFiltered,\n      isCheckedAll,\n      activeTab,\n    } = this.state;\n    const activeItems = todos.filter(item => item.completed === false).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={\n            !task ? this.validatedForm : this.addTodo\n          }\n          >\n            <input\n              value={task}\n              onChange={this.handleChange}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <TodoList\n          items={!isAnyFiltered ? todos : filtered}\n          changeStatus={this.changeStatus}\n          removeTask={this.removeTask}\n          removeCompleted={this.removeCompleted}\n          showAll={this.showAll}\n          showCompleted={this.showCompleted}\n          showActive={this.showActive}\n          activeItems={activeItems}\n          checkedAll={this.checkedAll}\n          isCheckedAll={isCheckedAll}\n          activeTab={activeTab}\n          taskEdited={this.taskEdited}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}