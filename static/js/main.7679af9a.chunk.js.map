{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["TodoItem","state","newTask","editedTask","handleEdit","event","name","target","task","props","todo","setState","taskChange","value","submitChanges","preventDefault","editTask","this","id","completed","changeStatus","removeTask","className","cx","editing","type","checked","onChange","htmlFor","onClick","onSubmit","placeholder","onBlur","Component","TodoList","todos","checkAll","isCheckedAll","length","map","key","Footer","activeTodos","activeTab","changeFilter","removeCompleted","selected","data-name","filter","arr","identifier","property","item","newItem","App","visibleTodos","componentDidMount","storageTodos","localStorage","getItem","JSON","parse","componentDidUpdate","prevProps","prevState","setItem","stringify","handleChange","replace","addTodo","newTodo","uuidv4","every","newList","dataset","checkTaskValid","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7679af9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  state = {\n    newTask: '',\n    editedTask: '',\n  };\n\n  handleEdit = (event) => {\n    const { name } = event.target;\n    const { task } = this.props.todo;\n\n    this.setState({\n      editedTask: name,\n      newTask: task,\n    });\n  }\n\n  taskChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      newTask: value,\n    });\n  }\n\n  submitChanges = (event) => {\n    event.preventDefault();\n    const { name } = event.target;\n    const { newTask } = this.state;\n    const { editTask } = this.props;\n\n    if (!newTask) {\n      return;\n    }\n\n    editTask(newTask, name);\n\n    this.setState({\n      editedTask: '',\n    });\n  }\n\n  render() {\n    const { task, id, completed } = this.props.todo;\n    const { changeStatus, removeTask } = this.props;\n    const { newTask, editedTask } = this.state;\n\n    return (\n      <li className={cx({\n        editing: id === editedTask,\n        completed,\n      })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={changeStatus}\n          />\n          <label\n            htmlFor={id}\n          >\n            {task}\n          </label>\n          <button\n            type=\"button\"\n            className=\"edit-icon\"\n            name={id}\n            onClick={this.handleEdit}\n          />\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            name={id}\n            onClick={removeTask}\n          />\n        </div>\n        <form onSubmit={this.submitChanges} name={id}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter the task\"\n            className=\"edit\"\n            value={newTask}\n            name={id}\n            onChange={this.taskChange}\n            onBlur={this.submitChanges}\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    removeTask,\n    changeStatus,\n    checkAll,\n    isCheckedAll,\n    editTask,\n  } = props;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        checked={todos.length ? isCheckedAll : false}\n        className=\"toggle-all\"\n        onChange={checkAll}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            changeStatus={changeStatus}\n            removeTask={removeTask}\n            editTask={editTask}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  isCheckedAll: PropTypes.bool.isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  checkAll: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Footer = (props) => {\n  const { activeTodos, activeTab, changeFilter, removeCompleted } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${activeTodos} tasks left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <button\n            type=\"button\"\n            className={cx({ selected: activeTab === 'All' })}\n            data-name=\"All\"\n            onClick={changeFilter}\n          >\n          All\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={cx({ selected: activeTab === 'Active' })}\n            data-name=\"Active\"\n            onClick={changeFilter}\n          >\n          Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={cx({ selected: activeTab === 'Completed' })}\n            data-name=\"Completed\"\n            onClick={changeFilter}\n          >\n          Completed\n          </button>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={removeCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  activeTodos: PropTypes.number.isRequired,\n  activeTab: PropTypes.string.isRequired,\n  removeCompleted: PropTypes.func.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Footer } from './components/Footer/Footer';\n\nfunction filter(arr, value, identifier, property) {\n  return arr.map((item) => {\n    const newItem = { ...item };\n\n    if (newItem.id === identifier) {\n      newItem[property] = value;\n    }\n\n    return newItem;\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    task: '',\n    todos: [],\n    visibleTodos: [],\n    isCheckedAll: false,\n    activeTab: 'All',\n  };\n\n  componentDidMount = () => {\n    const storageTodos = localStorage.getItem('todos');\n\n    if (storageTodos && storageTodos.length) {\n      this.setState({\n        todos: JSON.parse(storageTodos),\n        visibleTodos: JSON.parse(storageTodos),\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      task: value.replace(/^\\s+$/g, ''),\n    });\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n    const { task } = this.state;\n    const newTodo = {\n      id: uuidv4(),\n      task,\n      completed: false,\n    };\n\n    this.setState(prevState => ({\n      todos: [...prevState.todos, newTodo],\n      task: '',\n      visibleTodos: [...prevState.todos, newTodo],\n      activeTab: 'All',\n    }));\n  }\n\n  changeStatus = (event) => {\n    const { checked, id } = event.target;\n\n    this.setState(prevState => ({\n      todos: filter(prevState.todos, checked, id, 'completed'),\n      visibleTodos: filter(prevState.visibleTodos, checked, id, 'completed'),\n      isCheckedAll: filter(prevState.todos, checked, id, 'completed')\n        .every(item => item.completed === true),\n    }));\n  }\n\n  removeTask = (event) => {\n    const { name } = event.target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.id !== name),\n      visibleTodos: prevState.visibleTodos.filter(item => item.id !== name),\n    }));\n  }\n\n  removeCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.completed === false),\n      visibleTodos: prevState.visibleTodos\n        .filter(item => item.completed === false),\n      isCheckedAll: false,\n    }));\n  }\n\n  changeFilter = (event) => {\n    event.preventDefault();\n    const { name } = event.target.dataset;\n    const { todos } = this.state;\n    let newList;\n\n    if (name === 'All') {\n      this.setState({\n        visibleTodos: [...todos],\n        activeTab: name,\n      });\n\n      return;\n    }\n\n    if (name === 'Active') {\n      newList = todos.filter(item => item.completed === false);\n    }\n\n    if (name === 'Completed') {\n      newList = todos.filter(item => item.completed === true);\n    }\n\n    this.setState({\n      visibleTodos: [...newList],\n      activeTab: name,\n    });\n  }\n\n  checkTaskValid = (event) => {\n    event.preventDefault();\n    const { task } = this.state;\n\n    if (task) {\n      this.addTodo(event);\n    }\n  }\n\n  checkAll = (event) => {\n    const { checked } = event.target;\n    const { todos } = this.state;\n\n    const newList = todos.map(item => ({\n      ...item,\n      completed: checked,\n    }));\n\n    this.setState({\n      todos: [...newList],\n      visibleTodos: [...newList],\n      isCheckedAll: checked,\n      activeTab: 'All',\n    });\n  }\n\n  editTask = (newTask, name) => {\n    this.setState(prevState => ({\n      todos: filter(prevState.todos, newTask, name, 'task'),\n      visibleTodos: filter(prevState.visibleTodos, newTask, name, 'task'),\n    }));\n  }\n\n  render() {\n    const {\n      task,\n      todos,\n      visibleTodos,\n      isCheckedAll,\n      activeTab,\n    } = this.state;\n    const activeTodos = todos.filter(item => item.completed === false).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.checkTaskValid}>\n            <input\n              value={task}\n              onChange={this.handleChange}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <TodoList\n          todos={visibleTodos}\n          changeStatus={this.changeStatus}\n          removeTask={this.removeTask}\n          checkAll={this.checkAll}\n          isCheckedAll={isCheckedAll}\n          editTask={this.editTask}\n        />\n\n        <Footer\n          activeTodos={activeTodos}\n          activeTab={activeTab}\n          changeFilter={this.changeFilter}\n          removeCompleted={this.removeCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}