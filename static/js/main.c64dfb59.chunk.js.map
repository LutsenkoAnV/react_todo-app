{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["TodoItem","state","newTask","editedTask","handleEdit","event","name","target","task","props","todo","setState","taskChange","value","submitChanges","preventDefault","closest","editTask","this","id","completed","changeStatus","removeTask","className","cx","editing","type","checked","onChange","htmlFor","style","textDecoration","onClick","onSubmit","placeholder","onBlur","Component","TodoList","todos","checkAll","isCheckedAll","length","map","key","Footer","activeTodos","activeTab","changeFilter","removeCompleted","selected","filter","arr","identifier","item","newItem","App","visibleTodos","componentDidMount","storageTodos","localStorage","getItem","JSON","parse","componentDidUpdate","prevProps","prevState","setItem","stringify","handleChange","replace","addTodo","newTodos","uuidv4","newList","newListFiltered","every","checkTaskValid","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c64dfb59.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  state = {\n    newTask: '',\n    editedTask: '',\n  };\n\n  handleEdit = (event) => {\n    const { name } = event.target;\n    const { task } = this.props.todo;\n\n    this.setState({\n      editedTask: name,\n      newTask: task,\n    });\n  }\n\n  taskChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      newTask: value,\n    });\n  }\n\n  submitChanges = (event) => {\n    event.preventDefault();\n    const { name } = event.target.closest('form');\n    const { newTask } = this.state;\n    const { editTask } = this.props;\n\n    if (!newTask) {\n      return;\n    }\n\n    editTask(newTask, name);\n\n    this.setState({\n      editedTask: '',\n    });\n  }\n\n  render() {\n    const { task, id, completed } = this.props.todo;\n    const { changeStatus, removeTask } = this.props;\n    const { newTask, editedTask } = this.state;\n\n    return (\n      <li className={cx({ editing: id === editedTask })}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={changeStatus}\n          />\n          <label\n            htmlFor={id}\n            style={{ textDecoration: completed ? 'line-through' : 'none' }}\n          >\n            {task}\n          </label>\n          <button\n            type=\"button\"\n            className=\"edit-icon\"\n            name={id}\n            onClick={this.handleEdit}\n          />\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            name={id}\n            onClick={removeTask}\n          />\n        </div>\n        <form onSubmit={this.submitChanges} name={id}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter the task\"\n            className=\"edit\"\n            value={newTask}\n            onChange={this.taskChange}\n            onBlur={this.submitChanges}\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    removeTask,\n    changeStatus,\n    checkAll,\n    isCheckedAll,\n    editTask,\n  } = props;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        checked={todos.length ? isCheckedAll : false}\n        className=\"toggle-all\"\n        onChange={checkAll}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            changeStatus={changeStatus}\n            removeTask={removeTask}\n            editTask={editTask}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  isCheckedAll: PropTypes.bool.isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  checkAll: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Footer = (props) => {\n  const { activeTodos, activeTab, changeFilter, removeCompleted } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${activeTodos} tasks left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <button\n            type=\"button\"\n            className={cx({ selected: activeTab === 'All' })}\n            name=\"All\"\n            onClick={changeFilter}\n          >\n          All\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={cx({ selected: activeTab === 'Active' })}\n            name=\"Active\"\n            onClick={changeFilter}\n          >\n          Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={cx({ selected: activeTab === 'Completed' })}\n            name=\"Completed\"\n            onClick={changeFilter}\n          >\n          Completed\n          </button>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={removeCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  activeTodos: PropTypes.number.isRequired,\n  activeTab: PropTypes.string.isRequired,\n  removeCompleted: PropTypes.func.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Footer } from './components/Footer/Footer';\n\nfunction filter(arr, value, identifier) {\n  return arr.map((item) => {\n    const newItem = { ...item };\n\n    if (newItem.id === identifier) {\n      newItem.completed = value;\n    }\n\n    return newItem;\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    task: '',\n    todos: [],\n    visibleTodos: [],\n    isCheckedAll: false,\n    activeTab: 'All',\n  };\n\n  componentDidMount = () => {\n    const storageTodos = localStorage.getItem('todos');\n\n    if (storageTodos) {\n      this.setState({\n        todos: JSON.parse(storageTodos),\n        visibleTodos: JSON.parse(storageTodos),\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      task: value.replace(/^\\s+$/g, ''),\n    });\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n    const { task, todos } = this.state;\n    const newTodos = [...todos, {\n      id: uuidv4(),\n      task,\n      completed: false,\n    }];\n\n    this.setState({\n      todos: newTodos,\n      task: '',\n      visibleTodos: newTodos,\n      activeTab: 'All',\n    });\n  }\n\n  changeStatus = (event) => {\n    const { checked, id } = event.target;\n    const { todos, visibleTodos } = this.state;\n\n    const newList = filter(todos, checked, id);\n    const newListFiltered = filter(visibleTodos, checked, id);\n\n    this.setState({\n      todos: [...newList],\n      visibleTodos: [...newListFiltered],\n      isCheckedAll: newList.every(item => item.completed === true),\n    });\n  }\n\n  removeTask = (event) => {\n    const { name } = event.target;\n    const { todos, visibleTodos } = this.state;\n    const newList = todos.filter(item => item.id !== name);\n    const newListFiltered = visibleTodos.filter(item => item.id !== name);\n\n    this.setState({\n      todos: [...newList],\n      visibleTodos: [...newListFiltered],\n    });\n  }\n\n  removeCompleted = () => {\n    const { todos } = this.state;\n    const newList = todos.filter(item => item.completed === false);\n\n    this.setState({\n      todos: [...newList],\n      visibleTodos: [...newList],\n      isCheckedAll: false,\n    });\n  }\n\n  changeFilter = (event) => {\n    event.preventDefault();\n    const { name } = event.target;\n    const { todos } = this.state;\n    let newList;\n\n    if (name === 'All') {\n      this.setState({\n        visibleTodos: [...todos],\n        activeTab: name,\n      });\n\n      return;\n    }\n\n    if (name === 'Active') {\n      newList = todos.filter(item => item.completed === false);\n    }\n\n    if (name === 'Completed') {\n      newList = todos.filter(item => item.completed === true);\n    }\n\n    this.setState({\n      visibleTodos: [...newList],\n      activeTab: name,\n    });\n  }\n\n  checkTaskValid = (event) => {\n    event.preventDefault();\n    const { task } = this.state;\n\n    if (task) {\n      this.addTodo(event);\n    }\n  }\n\n  checkAll = () => {\n    const { todos, isCheckedAll } = this.state;\n\n    const newList = todos.map(item => ({\n      ...item,\n      completed: !isCheckedAll,\n    }));\n\n    this.setState(prevState => ({\n      todos: [...newList],\n      visibleTodos: [...newList],\n      isCheckedAll: !prevState.isCheckedAll,\n    }));\n  }\n\n  editTask = (newTask, name) => {\n    const { todos } = this.state;\n\n    const newList = todos.map((item) => {\n      const newItem = { ...item };\n\n      if (newItem.id === name) {\n        newItem.task = newTask;\n      }\n\n      return newItem;\n    });\n\n    this.setState({\n      todos: [...newList],\n      visibleTodos: [...newList],\n    });\n  }\n\n  render() {\n    const {\n      task,\n      todos,\n      visibleTodos,\n      isCheckedAll,\n      activeTab,\n    } = this.state;\n    const activeTodos = todos.filter(item => item.completed === false).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.checkTaskValid}>\n            <input\n              value={task}\n              onChange={this.handleChange}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <TodoList\n          todos={visibleTodos}\n          changeStatus={this.changeStatus}\n          removeTask={this.removeTask}\n          checkAll={this.checkAll}\n          isCheckedAll={isCheckedAll}\n          editTask={this.editTask}\n        />\n\n        <Footer\n          activeTodos={activeTodos}\n          activeTab={activeTab}\n          changeFilter={this.changeFilter}\n          removeCompleted={this.removeCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}