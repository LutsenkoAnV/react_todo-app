{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["TodoItem","state","edtiTitle","props","todo","task","placeholder","markCompleted","event","target","checked","id","changeStatus","deleteTask","name","removeTask","handleEdit","editTask","taskChange","value","setState","submitChanges","taskEdited","key","this","completed","isEdit","className","cx","editing","type","onChange","htmlFor","style","textDecoration","onClick","onKeyDown","Component","TodoList","items","activeItems","removeCompleted","showAll","showCompleted","showActive","checkedAll","isCheckedAll","activeLink","map","href","selected","App","todos","JSON","parse","localStorage","getItem","filtered","isAnyFiltered","handleChange","replace","addTodo","preventDefault","prevState","uuidv4","status","newListFiltered","newList","item","newItem","every","filter","innerText","validatedForm","i","length","storage","stringify","setItem","onSubmit","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c62e53bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  state = {\n    edtiTitle: this.props.todo.task,\n    placeholder: '',\n  };\n\n  markCompleted = (event) => {\n    const { checked, id } = event.target;\n    const { changeStatus } = this.props;\n\n    changeStatus(id, checked);\n  }\n\n  deleteTask = (event) => {\n    const { name } = event.target;\n    const { removeTask } = this.props;\n\n    removeTask(name);\n  }\n\n  handleEdit = (event) => {\n    const { name } = event.target;\n    const { editTask } = this.props;\n\n    editTask(name);\n  }\n\n  taskChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      edtiTitle: value,\n    });\n  }\n\n  submitChanges = (event) => {\n    const { name } = event.target;\n    const { edtiTitle } = this.state;\n    const { taskEdited } = this.props;\n\n    if (event.key === 'Enter' || event.key === 'NumPadEnter') {\n      if (!edtiTitle) {\n        this.setState({\n          placeholder: 'Enter the task',\n        });\n      } else {\n        taskEdited(edtiTitle, name);\n      }\n    }\n  }\n\n  render() {\n    const { task, id, completed } = this.props.todo;\n    const { isEdit } = this.props;\n    const { edtiTitle, placeholder } = this.state;\n\n    return (\n      <li className={cx({ editing: id === isEdit })}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={this.markCompleted}\n          />\n          <label\n            htmlFor={id}\n            style={{ textDecoration: completed ? 'line-through' : 'none' }}\n          >\n            {task}\n          </label>\n          <button\n            type=\"button\"\n            className=\"edit-icon\"\n            name={id}\n            onClick={this.handleEdit}\n          />\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            name={id}\n            onClick={this.deleteTask}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          placeholder={placeholder}\n          value={edtiTitle}\n          name={id}\n          onChange={this.taskChange}\n          onKeyDown={this.submitChanges}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  isEdit: PropTypes.string.isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n  taskEdited: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    items,\n    activeItems,\n    removeTask,\n    changeStatus,\n    removeCompleted,\n    showAll,\n    showCompleted,\n    showActive,\n    checkedAll,\n    isCheckedAll,\n    activeLink,\n    isEdit,\n    editTask,\n    taskEdited,\n  } = props;\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          checked={isCheckedAll}\n          className=\"toggle-all\"\n          onChange={checkedAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n          {items.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              changeStatus={changeStatus}\n              removeTask={removeTask}\n              isEdit={isEdit}\n              editTask={editTask}\n              taskEdited={taskEdited}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${activeItems} tasks left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={cx({ selected: activeLink === 'All' })}\n              onClick={showAll}\n            >\n            All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={cx({ selected: activeLink === 'Active' })}\n              onClick={showActive}\n            >\n            Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={cx({ selected: activeLink === 'Completed' })}\n              onClick={showCompleted}\n            >\n            Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={removeCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    task: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  activeItems: PropTypes.number.isRequired,\n  isCheckedAll: PropTypes.bool.isRequired,\n  activeLink: PropTypes.string.isRequired,\n  isEdit: PropTypes.string.isRequired,\n  removeTask: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  removeCompleted: PropTypes.func.isRequired,\n  showAll: PropTypes.func.isRequired,\n  showCompleted: PropTypes.func.isRequired,\n  showActive: PropTypes.func.isRequired,\n  checkedAll: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n  taskEdited: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList/TodoList';\n\nclass App extends React.Component {\n  state = {\n    task: '',\n    todos: JSON.parse(localStorage.getItem('state')) || [],\n    filtered: [],\n    isAnyFiltered: false,\n    placeholder: 'What needs to be done?',\n    isCheckedAll: false,\n    activeLink: 'All',\n    isEdit: '',\n  };\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      task: value.replace(/\\s+/g, ' '),\n    });\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n    const { task } = this.state;\n\n    this.setState(prevState => ({\n      todos: [...prevState.todos, {\n        id: uuidv4(), task, completed: false,\n      }],\n      task: '',\n      isAnyFiltered: false,\n      filtered: [],\n      placeholder: 'What needs to be done?',\n      activeLink: 'All',\n    }));\n  }\n\n  changeStatus = (id, status) => {\n    const { todos, filtered } = this.state;\n    let newListFiltered;\n\n    const newList = todos.map((item) => {\n      const newItem = { ...item };\n\n      if (newItem.id === id) {\n        newItem.completed = status;\n      }\n\n      return newItem;\n    });\n\n    if (filtered) {\n      newListFiltered = filtered.map((item) => {\n        const newItem = { ...item };\n\n        if (newItem.id === id) {\n          newItem.completed = status;\n        }\n\n        return newItem;\n      });\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n      isCheckedAll: todos.every(item => item.completed === true),\n    });\n  }\n\n  removeTask = (name) => {\n    const { todos, filtered } = this.state;\n    const newList = todos.filter(item => item.id !== name);\n    let newListFiltered;\n\n    if (filtered) {\n      newListFiltered = filtered.filter(item => item.id !== name);\n    } else {\n      newListFiltered = filtered;\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n    });\n  }\n\n  removeCompleted = () => {\n    const { todos, filtered } = this.state;\n    const newList = todos.filter(item => item.completed === false);\n    let newListFiltered;\n\n    if (filtered) {\n      newListFiltered = filtered.filter(item => item.completed === false);\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n      isCheckedAll: false,\n    });\n  }\n\n  showAll = (event) => {\n    event.preventDefault();\n    const { innerText } = event.target;\n\n    this.setState({\n      filtered: [],\n      isAnyFiltered: false,\n      activeLink: innerText,\n    });\n  }\n\n  showCompleted = (event) => {\n    event.preventDefault();\n    const { innerText } = event.target;\n    const { todos } = this.state;\n    const newList = todos.filter(item => item.completed === true);\n\n    this.setState({\n      filtered: [...newList],\n      isAnyFiltered: true,\n      activeLink: innerText,\n    });\n  }\n\n  showActive = (event) => {\n    event.preventDefault();\n    const { innerText } = event.target;\n    const { todos } = this.state;\n    const newList = todos.filter(item => item.completed === false);\n\n    this.setState({\n      filtered: [...newList],\n      isAnyFiltered: true,\n      activeLink: innerText,\n    });\n  }\n\n  validatedForm = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      placeholder: 'Please enter the task',\n      task: '',\n    });\n  }\n\n  checkedAll = () => {\n    const { todos, isCheckedAll } = this.state;\n\n    const newList = todos.map((item) => {\n      const newItem = { ...item };\n\n      if (!isCheckedAll) {\n        newItem.completed = true;\n      } else {\n        newItem.completed = false;\n      }\n\n      return newItem;\n    });\n\n    this.setState({\n      todos: [...newList],\n      filtered: [],\n      isAnyFiltered: false,\n      isCheckedAll: !isCheckedAll,\n    });\n  }\n\n  editTask = (name) => {\n    this.setState({\n      isEdit: name,\n    });\n  }\n\n  taskEdited = (edtiTitle, name) => {\n    const { todos, filtered } = this.state;\n    let newListFiltered;\n\n    const newList = todos.map((item) => {\n      const newItem = { ...item };\n\n      if (newItem.id === name) {\n        newItem.task = edtiTitle;\n      }\n\n      return newItem;\n    });\n\n    if (filtered) {\n      newListFiltered = filtered.map((item) => {\n        const newItem = { ...item };\n\n        if (newItem.id === name) {\n          newItem.task = edtiTitle;\n        }\n\n        return newItem;\n      });\n    } else {\n      newListFiltered = filtered;\n    }\n\n    this.setState({\n      todos: [...newList],\n      filtered: newListFiltered,\n      isCheckedAll: todos.every(item => item.completed === true),\n      isEdit: '',\n    });\n  }\n\n  render() {\n    const {\n      task,\n      todos,\n      filtered,\n      isAnyFiltered,\n      placeholder,\n      isCheckedAll,\n      activeLink,\n      isEdit,\n    } = this.state;\n    const activeItems = todos.filter(i => i.completed === false).length;\n    const storage = JSON.stringify(todos);\n\n    localStorage.setItem('state', storage);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={\n            !task || task === ' ' ? this.validatedForm : this.addTodo\n          }\n          >\n            <input\n              value={task}\n              onChange={this.handleChange}\n              className=\"new-todo\"\n              placeholder={placeholder}\n            />\n          </form>\n        </header>\n\n        <TodoList\n          items={!isAnyFiltered ? todos : filtered}\n          changeStatus={this.changeStatus}\n          removeTask={this.removeTask}\n          removeCompleted={this.removeCompleted}\n          showAll={this.showAll}\n          showCompleted={this.showCompleted}\n          showActive={this.showActive}\n          activeItems={activeItems}\n          checkedAll={this.checkedAll}\n          isCheckedAll={isCheckedAll}\n          activeLink={activeLink}\n          isEdit={isEdit}\n          editTask={this.editTask}\n          taskEdited={this.taskEdited}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}